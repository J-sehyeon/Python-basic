# 클래스의 추가적인 구문

# 어떤 클래스의 인스턴스인지 확인하기   / isinstance(인스턴스, 클래스)
# 클래스를 선언합니다.
class Student:
    def __init__(self):
        pass

# 학생을 선언합니다.
student = Student()

# 인스턴스 확인하기
print("isinstance(student, Student):", isinstance(student, Student))
    # 상속에 따른 인스턴스 확인
    # 단순한 인스턴스 방법으로는 'type(인스턴스) == 클래스' 이 있다.    / 다만 이 방법은 '상속을 사용할 때' 다르게 동작한다.
    # isinstance_type.py 
    # isinstance() 함수는 상속 관계를 확인하는 반면, type() 함수는 상속 관계를 확인하지 않는다.
# isinstance.py

# 특수한 이름의 메소드  / __<이름>__()
# str_func.py, compare_func.py
# 이러한 방식으로 제공되는 함수는 모두 지금까지 사용했던 것과 같은 방법으로 객체를 다룰 수 있게 해주는 함수이다.    / 따라서 메소드를 
# 만들 때에 원하는 함수 이름을 사용하면 안 된다.
    # 예외 처리     / ==, !=, > 등 비교 연산자를 사용하면 방금 살펴본 함수가 호출된다.  / 이 때 자료형에 제한을 두고 싶다면 자료형을
    # 한정하고 이외의 자료형을 사용할 때 예외를 발생시키면 된다.    / 일반적으로 문자열과 숫자를 비교하면 TypeError가 발생한다.
    # compare_func01.py

# 클래스 변수와 메소드  / 인스턴스오 같이 클래스 또한 속성(변수)과 기능(함수)을 가질 수 있다.
# 클래스 변수   / class 클래스 이름:
#                    클래스 변수 = 값
# 클래스 변수에 접근하기    / 클래스 이름.변수 이름     / 클래스 내부와 외부에서 같은 방법으로 접근
# class_var.py
# 클래스 함수   / class 클래스 이름:                    / 클래스 데코레이터 사용
#                    @classmethod
#                    def 클래스 함수(cls, 매개변수):
#                        pass
# 클래스 함수 호출  / 클래스 이름.함수 이름(매개변수)
# class_func.py

# 가비지 컬렉터(garbage collector)  / 더 사용할 가능성이 없는 데이터를 메모리에서 제거하는 역할을 한다.
# 프로그램 내부에서 무언가를 생성한다는 것은 메모리 위에 올린다는 의미이다. 
# 스왑(swap)    / 메모리가 부족할 때 컴퓨터가 하드디스크를 메모리처럼 사용하는 동작     / 하드디스크는 메모리보다 훨씬 느리다.
# 가비지 컬렉터를 통해 컴퓨터 성능을 유지시킨다.
# '더 사용할 가능성이 없는 데이터'라는 것에는 변수에 저장되지 않거나, 함수 등에서 나오면서 변수를 활용할 수 없게 되는 경우 등이 있다.
    # 소멸자(destructor)    / 생성자와 반대로 인스턴스가 소멸될 때 호출되는 함수이다.
# garbage01.py, garbage02.py

# 프라이빗 변수와 게터/세터     / 객체를 효율적으로 사용하기 위한 추가 기능이다.
# math_sample.py
# <math_sampe.py> 에서 사용한 Circle 클래스의 radius 속성에 음수를 넣으면 넓이는 괜찮지만, 둘레는 음수가 나온다.
# circle = Circle(10)
# circle.radius = -2        / radius 속성에 음수를 넣음
# print("원의 둘레:", circle.get_circumference())
# print("원의 넓이:", circle.get_area())

# 프라이빗 변수     / __<변수 이름>     / 클래스 내부의 변수를 외부에서 사용하는 것을 막는다.
# private_var.py
# 게터와 세터   / 프라이빗 변수의 값을 추출하거나 변경할 목적으로, 간접적으로 속성에 접근하도록 해주는 함수이다.
# getter_setter.py
# 데코레이터를 사용한 게터와 세터   / @property, @<변수 이름>.setter
# deco01.py

# 상속(inheritance)     / 다른 누군가가 만들어 놓은 기본 형태에 내가 원하는 것만 교체하는 것을 말한다.
# 다중 상속     / 다른 누군가가 만들어 놓은 형태들을 조립해서 내가 원하는 것을 만드는 것을 말한다.  / 고급 기술이라 거의 사용되지 않는다.
# 프로그래밍 언어는 기반이 되는 것을 부모라고 부르고, 이를 기반으로 생성한 것을 자식이라고 부른다.
# inherit01.py
# 예외 클래스 만들기
# inherit02.py, inherit03.py
# 오버라이드(override)  / 부모에 정의되어 있는 함수를 자식에서 다시 정의하는 것 / '재정의'라고도 부른다.
# inherit04.py