# 클래스의 추가적인 구문

# 어떤 클래스의 인스턴스인지 확인하기   / isinstance(인스턴스, 클래스)
# 클래스를 선언합니다.
class Student:
    def __init__(self):
        pass

# 학생을 선언합니다.
student = Student()

# 인스턴스 확인하기
print("isinstance(student, Student):", isinstance(student, Student))
    # 상속에 따른 인스턴스 확인
    # 단순한 인스턴스 방법으로는 'type(인스턴스) == 클래스' 이 있다.    / 다만 이 방법은 '상속을 사용할 때' 다르게 동작한다.
    # isinstance_type.py 
    # isinstance() 함수는 상속 관계를 확인하는 반면, type() 함수는 상속 관계를 확인하지 않는다.
# isinstance.py

# 특수한 이름의 메소드  / __<이름>__()
# str_func.py, compare_func.py
# 이러한 방식으로 제공되는 함수는 모두 지금까지 사용했던 것과 같은 방법으로 객체를 다룰 수 있게 해주는 함수이다.    / 따라서 메소드를 
# 만들 때에 원하는 함수 이름을 사용하면 안 된다.
    # 예외 처리     / ==, !=, > 등 비교 연산자를 사용하면 방금 살펴본 함수가 호출된다.  / 이 때 자료형에 제한을 두고 싶다면 자료형을
    # 한정하고 이외의 자료형을 사용할 때 예외를 발생시키면 된다.    / 일반적으로 문자열과 숫자를 비교하면 TypeError가 발생한다.
    # compare_func01.py

# 클래스 변수와 메소드  / 인스턴스오 같이 클래스 또한 속성(변수)과 기능(함수)을 가질 수 있다.
# 클래스 변수   / class 클래스 이름:
#                    클래스 변수 = 값
# 클래스 변수에 접근하기    / 클래스 이름.변수 이름     / 클래스 내부와 외부에서 같은 방법으로 접근
# class_var.py
# 클래스 함수   / class 클래스 이름:                    / 클래스 데코레이터 사용
#                    @classmethod
#                    def 클래스 함수(cls, 매개변수):
#                        pass
# 클래스 함수 호출  / 클래스 이름.함수 이름(매개변수)
# class_func.py